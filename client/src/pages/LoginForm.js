import { Button, Form, Input } from 'antd'
import { useState } from 'react'
import validator from 'validator'
//—Å–∞–π—Ç antd –¥–∏–∑–∞–π–Ω
//–ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–ª—è. –ï—Å–ª–∏ –≤–∏–¥–Ω–æ, —á—Ç–æ –ª–æ–≥–∏–Ω –ø—É—Å—Ç–æ–π —Ç–æ —Å—Ä–∞–∑—É –æ—à–∏–±–∫–∞!
//–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–¥–µ—Ç –Ω–∞ –æ–Ω—á–µ–π–¥–∂ —Å–æ–±—ã—Ç–∏—è
const validateMessages = {
	required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!'
}

function LoginForm(props) {
	const [isLogin, setIsLogin] = useState(true)
	const [authErrorMessage, setAuthErrorMessage] = useState('')
	const [form] = Form.useForm()
	//const [authMessage, setAuthMessage] = useState('')

	async function auth() {//–ø–æ —Å—É—Ç–∏ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã// –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
		form
			.validateFields()
			.then(() => {
				// if (validator.isStrongPassword(form.getFieldsValue().password, { 
				// 	minLength: 8, minLowercase: 1, 
				// 	minUppercase: 1, minNumbers: 1
				// })) { 
				// 	setAuthErrorMessage('–ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å') 
				// } else { 
				// 	setAuthErrorMessage('–ù–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å') 
				// }  
			
				if (form.getFieldsValue().passwordRepeat) {
                    // –º—ã –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É. –ø—Ä–æ–º–∏—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è 
					//–µ—Å–ª–∏ —É –Ω–∞—Å –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è –ø–∞—Ä–æ–ª–∏, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞
                    // —Ç–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–¥–∏–Ω, —Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–¥–Ω–∞ –≤—Å–µ–≥–¥–∞, –Ω–æ –Ω–∞ –±–µ–∫ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏
                    //–µ—Å–ª–∏ –∞–∫–∫ –Ω–µ—Ç —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è

					console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', form.getFieldsValue())
					setAuthErrorMessage('–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å!')
				} else {
					console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', form.getFieldsValue())
					// –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –ª–æ–≥–∏–Ω–∞
					if (form.getFieldsValue().login === 'admin' && form.getFieldsValue().password === 'Wujoh=1!') {
						props.setIsLoggedIn()
					} else {
						setAuthErrorMessage('–ù–µ –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
					}
				}
			})
			.catch(err => {
				console.log('error', err)
			})
	}
//—Å–º–µ–Ω–∞ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
	function changeAuthType() {
		setAuthErrorMessage('')//–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		setIsLogin(!isLogin)//–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é isLogin
		form.resetFields()//–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
	}

	async function repeatPasswordFieldValidation(formRecord) {//–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞–∫ —Ä–∞–∑ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		const passwordField = formRecord.getFieldValue('password')
		const passwordRepeatField = formRecord.getFieldValue('passwordRepeat')
		if (passwordRepeatField && passwordField !== passwordRepeatField) {
			throw Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
		}
	}

	async function StrongPass(formRecord) {//–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞–∫ —Ä–∞–∑ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		const passwordField = formRecord.getFieldValue('password')
		if (validator.isStrongPassword(passwordField, { 
			minLength: 8, minLowercase: 1, 
			minUppercase: 1, minNumbers: 1
		})) {<></>} else { 
			throw Error('–ù–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å') 
		}  
	
	}

	return (
		<>
			<div className='login-page'>
				<div className='login-form-wrapper'>
					<h1>{isLogin ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h1>
					<Form
						labelAlign='left'
						labelCol={{ span: 7 }}
						wrapperCol={{ span: 18 }}
						form={form}//–ø–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ä–º—É
						validateMessages={validateMessages}
					>
						<Form.Item
							label='–õ–æ–≥–∏–Ω'
							name='login'
							rules={[
								{
									required: true//–≤—Å–ø–ª—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–≤–µ—Ä—Ö—É –ø—Ä–æ–ø–∏—Å–∞–Ω–æ)// –∏ –≤–æ–∑–º–æ–∂–Ω–æ —Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—è, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ
								}
							]}
						>
							<Input allowClear />
						</Form.Item>
						<Form.Item
							label='–ü–∞—Ä–æ–ª—å'
							name='password'
							rules={[
								{
									required: true
								},
								form => ({
									validator() {//–∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
										return StrongPass(form)
									}
								})
							]}
						>
							<Input.Password allowClear />
						</Form.Item>
						{!isLogin ? (
							<Form.Item
								label='–ü–æ–≤—Ç–æ—Ä'
								name='passwordRepeat'
								rules={[
									{
										required: true
									},
									form => ({
										validator() {//–∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
											return repeatPasswordFieldValidation(form)
										}
									})
								]}
							>
								<Input.Password allowClear />
							</Form.Item>
						) : (
							<></>
						)}
					</Form>
					{authErrorMessage ? <div className='auth-error-message'>{authErrorMessage}</div> : <></>}
					<Button type='primary' onClick={auth} style={{ width: 200 }}>
						{isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
					</Button>
					<p>
						{isLogin ? '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?ü§®' : '–ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –º–æ–∂–µ—Ç–µ –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏ü§ìüëâ'}
						<Button type='link' onClick={changeAuthType}>  
                        {/* —Å–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º. –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç—å—å–± —Ñ–æ—Ä–º—É –∞ –ø–æ—Ç–æ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ. —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–¥–Ω–∏–º –æ–±—å–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–æ–π*/}
							{isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}
						</Button>
					</p>
				</div>
			</div>
		</>
	)
}

export default LoginForm